{"ast":null,"code":"var _jsxFileName = \"C:\\\\E-commerce\\\\adminpanel\\\\src\\\\components\\\\Update\\\\Update.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport '../../cssHelper/helper.css';\nimport './Update.css';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Update() {\n  _s();\n  let {\n    id\n  } = useParams();\n\n  // State variable to hold form data\n  const [product, setProduct] = useState({\n    name: '',\n    price: '',\n    quality: '',\n    brand: '',\n    color: '',\n    size: '',\n    description: '',\n    category: '',\n    quantity: '',\n    weight: ''\n  });\n\n  // Function to fetch the product data on component mount\n  useEffect(() => {\n    const getItem = async itemId => {\n      try {\n        const response = await fetch(`http://localhost:4000/product/${itemId}`, {\n          method: 'GET',\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        setProduct(data); // Set the fetched product data into state\n      } catch (error) {\n        console.error('Error fetching item:', error);\n      }\n    };\n    getItem(id); // Call getItem with the id from useParams\n  }, [id]);\n\n  // Update individual form field values in state\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setProduct({\n      ...product,\n      [name]: value\n    });\n  };\n\n  // Handle form submission\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await fetch(`http://localhost:4000/product/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(product)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      // Assuming successful update, you might want to handle success here\n      console.log('Product updated successfully');\n    } catch (error) {\n      console.error('Error updating product:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form scroll-y scroll-hidden-x w-full\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleFormSubmit,\n      className: \"w-full flex flex-column gap-4 p-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"items flex flex-column gap\",\n        children: [\"Product name\", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: product.name,\n          onChange: handleInputChange,\n          type: \"text\",\n          name: \"name\",\n          placeholder: \"Product name\",\n          className: \"full radius pad-inline glass height\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        className: \"radius red-bg white-clr flex a-center j-center height font-sm pointer ease hover-green\",\n        value: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s(Update, \"Grz/OLi4FOuNFMSHLhniJ+Tqs3s=\", false, function () {\n  return [useParams];\n});\n_c = Update;\nexport default Update;\nvar _c;\n$RefreshReg$(_c, \"Update\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","Update","_s","id","product","setProduct","name","price","quality","brand","color","size","description","category","quantity","weight","getItem","itemId","response","fetch","method","headers","Accept","ok","Error","status","data","json","error","console","handleInputChange","e","value","target","handleFormSubmit","preventDefault","body","JSON","stringify","log","className","children","onSubmit","onChange","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/E-commerce/adminpanel/src/components/Update/Update.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport '../../cssHelper/helper.css';\r\nimport './Update.css';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction Update() {\r\n    let { id } = useParams();\r\n\r\n    // State variable to hold form data\r\n    const [product, setProduct] = useState({\r\n        name: '',\r\n        price: '',\r\n        quality: '',\r\n        brand: '',\r\n        color: '',\r\n        size: '',\r\n        description: '',\r\n        category: '',\r\n        quantity: '',\r\n        weight: '',\r\n    });\r\n\r\n    // Function to fetch the product data on component mount\r\n    useEffect(() => {\r\n        const getItem = async (itemId) => {\r\n            try {\r\n                const response = await fetch(`http://localhost:4000/product/${itemId}`, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        Accept: 'application/json',\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! Status: ${response.status}`);\r\n                }\r\n\r\n                const data = await response.json();\r\n                setProduct(data); // Set the fetched product data into state\r\n            } catch (error) {\r\n                console.error('Error fetching item:', error);\r\n            }\r\n        };\r\n\r\n        getItem(id); // Call getItem with the id from useParams\r\n    }, [id]);\r\n\r\n    // Update individual form field values in state\r\n    const handleInputChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setProduct({ ...product, [name]: value });\r\n    };\r\n\r\n    // Handle form submission\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        try {\r\n            const response = await fetch(`http://localhost:4000/product/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(product),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! Status: ${response.status}`);\r\n            }\r\n\r\n            // Assuming successful update, you might want to handle success here\r\n            console.log('Product updated successfully');\r\n        } catch (error) {\r\n            console.error('Error updating product:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"form scroll-y scroll-hidden-x w-full\">\r\n            <form onSubmit={handleFormSubmit} className=\"w-full flex flex-column gap-4 p-10\">\r\n                {/* Form fields */}\r\n                <div className=\"items flex flex-column gap\">\r\n                    Product name\r\n                    <input\r\n                        value={product.name}\r\n                        onChange={handleInputChange}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        placeholder=\"Product name\"\r\n                        className=\"full radius pad-inline glass height\"\r\n                    />\r\n                </div>\r\n                {/* Repeat similar input elements for other fields */}\r\n\r\n                {/* Submit button */}\r\n                <input\r\n                    type=\"submit\"\r\n                    className=\"radius red-bg white-clr flex a-center j-center height font-sm pointer ease hover-green\"\r\n                    value=\"Update\"\r\n                />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Update;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}